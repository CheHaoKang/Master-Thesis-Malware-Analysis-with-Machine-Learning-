# ### Draw experiment results ###
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import matplotlib.ticker

# ###>>> api statistics 25 50 >>>
if False:
    # fig = plt.figure()
    # ax = fig.add_subplot(111)
    plt.rcParams["figure.figsize"] = [12, 6]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, (subplot1, subplot2) = plt.subplots(1, 2, sharey=True)
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])
    # y = np.array([0.618585299505, 0.546720909417, 0.56578842564])
    # y2 = np.array([0.484096431055, 0.547388536198, 0.527218957033])
    y = np.array([0.653533645172, 0.415395097489, 0.614540090905])
    y2 = np.array([0.518709109288, 0.241251714046, 0.552058853073])
    yTime = np.array([1.77268646558, 2.03120458523, 0.196681066354])

    y21 = np.array([0.588775674683, 0.410509204128, 0.553036758703])
    y22 = np.array([0.516472144758, 0.260069244158, 0.564567460579])
    y2Time = np.array([3.06283073028, 4.79254558086, 0.253300583363])

    width = 0.35

    subplot1.set_title("API Statistics with 250 samples")
    subplot2.set_title("API Statistics with 500 samples")
    # plt.legend(loc='upper right', shadow=False)

    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3])#, ylabel='score')
    pL11 = subplot1.plot(x, y, 'k--', label='Optimization Score', zorder=10)
    pL12 = subplot1.plot(x, y2, 'k-.', label='Evaluation Score', zorder=10)
    for xCor, yCor in zip(x, y):
        subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    for xCor, yCor in zip(x, y2):
        subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 5.1])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, yTime, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, yTime):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.08, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # fig.add_axes([0.0, -0.5, 0.9, 0.9])
    # fig.subplots_adjust(bottom=-0.9)
    # subplot1.grid('on')
    # fig.savefig('samplefigure', bbox_extra_artists=(lgd,), bbox_inches='tight')
    # plt.tight_layout()
    # ax1.legend()
    # ax2.legend(loc='center right')
    # plt.legend((pL1, pL2, pBar), ('Training Score', 'Prediction Score', 'Time'))
    # plt.legend()

    ### subplot2 ###
    pL21 = subplot2.plot(x, y21, 'k--', label='Optimization Score', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score', zorder=10)
    for xCor, yCor in zip(x, y21):
        subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[0], y22[0], str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1], str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2]+0.01, str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')

    pL13 = subplot2.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 5.1], ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y2Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y2Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ### ________ ###

    # plt.tight_layout()
    fig.tight_layout()
    # fig.set_size_inches(30.5, 30.5)
    # print(fig.get_figwidth(), fig.get_figheight())
    # fig.set_size_inches(fig.get_figwidth()*0.7, fig.get_figheight()*0.7)

    fig.savefig('apiStatistics25_50.png', bbox_inches='tight')

    # plt.show()
    # #_____________________________
# ###___ api statistics 25 50 ___


# ###>>> api statistics 25 50 tfidf before after >>>
# # fig = plt.figure()
# # ax = fig.add_subplot(111)
# plt.rcParams["figure.figsize"] = [12, 6]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<
#
# #fig, ax1 = plt.subplots()
# fig, (subplot1, subplot2) = plt.subplots(1, 2, sharey=True)
# # print(fig.get_size_inches())
# # fig.set_size_inches(10.5, 30.5)
#
# my_xticks = ['KMeans','MeanShift','BIRCH']
# x = np.array([0.5, 1.5, 2.5])
# # y = np.array([0.618585299505, 0.546720909417, 0.56578842564])
# # y2 = np.array([0.484096431055, 0.547388536198, 0.527218957033])
# # y = np.array([0.653533645172, 0.415395097489, 0.614540090905])
# y = np.array([0.518709109288, 0.241251714046, 0.552058853073]) # with tfidf prediction score
# y2 = np.array([0.492548592696, 0.0866762863712, 0.405760907842]) # no tfidf prediction score
# yTime = np.array([1.77268646558, 2.03120458523, 0.196681066354]) # with tfidf running time
# y12Time = np.array([1.00831555128098, 1.0151257832845, 1.00250601768494]) # no tfidf running time <<< CHANGE
#
# y21 = np.array([0.516472144758, 0.260069244158, 0.564567460579])
# y22 = np.array([0.334057112579, 0.385317645288, 0.286104343838])
# y21Time = np.array([3.06283073028, 4.79254558086, 0.253300583363])
# y22Time = np.array([1.00831555128098, 1.0151257832845, 1.00250601768494]) # no tfidf running time <<< CHANGE
#
# width = 0.35
#
# subplot1.set_title("API Statistics with 25 samples")
# subplot2.set_title("API Statistics with 50 samples")
# # plt.legend(loc='upper right', shadow=False)
#
# plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylabel='prediction score')
# pL11 = subplot1.plot(x, y, 'k--', label='Prediction Score (tfidf)', zorder=10)
# pL12 = subplot1.plot(x, y2, 'k-.', label='Prediction Score (no tfidf)', zorder=10)
# for xCor, yCor in zip(x, y):
#     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# for xCor, yCor in zip(x, y2):
#     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL13 = subplot1.twinx()
# plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 5.1], ylabel='execution time (minutes)')
# pL13.bar(x - width / 2, yTime, width / 2, alpha = 0.2, label='Time (tfidf)', color='black', zorder=1)
# pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (no tfidf)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, yTime):
#     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# for xCor, yCor in zip(x-0.001, y12Time):
#     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
#
# h1, l1 = subplot1.get_legend_handles_labels()
# h2, l2 = pL13.get_legend_handles_labels()
#
# lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.08, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
# # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
#
#
# ### subplot2 ###
# plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylabel='prediction score')
#
# pL21 = subplot2.plot(x, y21, 'k--', label='Prediction Score (tfidf)', zorder=10)
# pL22 = subplot2.plot(x, y22, 'k-.', label='Prediction Score (no tfidf)', zorder=10)
# for xCor, yCor in zip(x, y21):
#     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# for xCor, yCor in zip(x, y22):
#     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL23 = subplot2.twinx()
# plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 5.1], ylabel='execution time (minutes)')
# pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (tfidf)', color='black', zorder=1)
# pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (no tfidf)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, y21Time):
#     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# for xCor, yCor in zip(x-0.001, y22Time):
#     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
#
#
#
# # pL23 = subplot2.twinx()
# # plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 3.5], ylabel='execution time (minutes)')
# # pL23.bar(x - width / 2, y2Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
# # for xCor, yCor in zip(x-width/3, y2Time):
# #     pL23.text(xCor, yCor, str("%.3f" % yCor))
# ### ________ ###
#
# # plt.tight_layout()
# fig.tight_layout()
# # fig.set_size_inches(30.5, 30.5)
# # print(fig.get_figwidth(), fig.get_figheight())
# # fig.set_size_inches(fig.get_figwidth()*0.7, fig.get_figheight()*0.7)
#
# fig.savefig('apiStatistics25_50_tfidfComparison.png', bbox_inches='tight')
#
# # plt.show()
# ###___ api statistics 25 50 tfidf before after___



###>>> api sequences time window >>>###
if False:
    plt.rcParams["figure.figsize"] = [14, 7.5]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 0.1 second 250 samples ###
    y = np.array([0.59815780483, 0.494999878027, 0.524556860926]) # with tfidf training score
    y2 = np.array([0.546189621613, 0.482687454453, 0.53766770606]) # with tfidf prediction score
    yTime = np.array([2.58570121527, 9.30152871609, 1.24169101715]) # with tfidf running time
    # y12Time = np.array([1.00831555128098, 1.0151257832845, 1.00250601768494]) # no tfidf running time <<< CHANGE

    ### 0.4 second 250 samples ###
    y21 = np.array([0.618585299505, 0.546720909417, 0.56578842564])
    y22 = np.array([0.484096431055, 0.547388536198, 0.527218957033])
    y21Time = np.array([2.08656423092, 6.61259760062, 0.915222386519])
    # y22Time = np.array([1.00831555128098, 1.0151257832845, 1.00250601768494]) # no tfidf running time <<< CHANGE

    ### 1 second 250 samples ###
    y31 = np.array([0.557083347897, 0.519028845381, 0.476712790771])
    y32 = np.array([0.493940646878, 0.432675026532, 0.256987651878])
    y31Time = np.array([1.87808943192, 5.39195519686, 0.809603516261])

    ### 0.1 second 500 samples ###
    y41 = np.array([0.554842466366, 0.458452368551, 0.457226052602])
    y42 = np.array([0.497187210384, 0.325629106203, 0.48035508173])
    y41Time = np.array([5.61709493399, 58.9521595478, 4.11334386667])

    ### 0.4 second 500 samples ###
    y51 = np.array([0.566185586081, 0.559305976371, 0.485736461434])
    y52 = np.array([0.568278005267, 0.531900679166, 0.447671368431])
    y51Time = np.array([4.2855575641, 39.6674031655, 2.77684978247])

    ### 1 second 500 samples ###
    y61 = np.array([0.525563739303, 0.516455377212, 0.453657158127])
    y62 = np.array([0.527708160561, 0.569745009773, 0.441972795004])
    y61Time = np.array([3.56122131348, 32.4839298328, 2.40308681329])


    width = 0.35

    subplot1.set_title("0.1 sec (250 samples)")
    subplot2.set_title("0.4 sec (250 samples)")
    subplot3.set_title("1 sec (250 samples)")

    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.65])
    pL11 = subplot1.plot(x, y, 'k--', label='Optimization Score', zorder=10)
    pL12 = subplot1.plot(x, y2, 'k-.', label='Evaluation Score', zorder=10)
    subplot1.text(x[0], y[0], str("%.3f" % (y[0]-0.0005)), weight='bold')
    subplot1.text(x[1], y[1]+0.01, str("%.3f" % (y[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y[2]-0.01, str("%.3f" % (y[2]-0.0005)), weight='bold')

    subplot1.text(x[0], y2[0], str("%.3f" % (y2[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1], y2[1]-0.01, str("%.3f" % (y2[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2], y2[2]+0.01, str("%.3f" % (y2[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 10.0])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, yTime, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, yTime):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.6, -1.28), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html

    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.65])
    pL21 = subplot2.plot(x, y21, 'k--', label='Optimization Score', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score', zorder=10)
    subplot2.text(x[0], y21[0], str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1], y21[1]-0.015, str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0], y22[0], str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1]+0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 10.0])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.65])
    pL31 = subplot3.plot(x, y31, 'k--', label='Optimization Score', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    for xCor, yCor in zip(x, y31):
        subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1], str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2]-0.2, y32[2]-0.025, str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 10.0], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y31Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################

    subplot4.set_title("0.1 sec (500 samples)")
    subplot5.set_title("0.4 sec (500 samples)")
    subplot6.set_title("1 sec (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL41 = subplot4.plot(x, y41, 'k--', label='Optimization Score', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    for xCor, yCor in zip(x, y41):
        subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1], y42[1], str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2]-0.2, y42[2]+0.011, str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 62.0])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL51 = subplot5.plot(x, y51, 'k--', label='Optimization Score', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0]-0.06, y51[0]-0.02, str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1], y51[1], str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2], str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0]-0.02, y52[0]+0.01, str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2]-0.2, y52[2]-0.015, str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 62.0])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL61 = subplot6.plot(x, y61, 'k--', label='Optimization Score', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0], y61[0]-0.01, str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1], str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2], str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0], y62[0]+0.01, str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2]-0.2, y62[2]-0.015, str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 62.0], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y61Time):
        pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    fig.tight_layout()
    fig.savefig('apiSequencesTimeWindow.png', bbox_inches='tight')
###___ api sequences time window ___




###>>> api sequences time window  no refinement >>>###
if False:
    plt.rcParams["figure.figsize"] = [15, 8]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 0.1 second 250 samples ###
    y11 = np.array([0.446002653842, 0.530195259902, 0.323171025501]) # no refinement prediction score
    y12 = np.array([0.546189621613, 0.482687454453, 0.53766770606]) # refinement prediction score
    y11Time = np.array([4.07167495092, 18.3856094996, 2.54415003459]) # no refinement running time
    y12Time = np.array([2.58570121527, 9.30152871609, 1.24169101715]) # refinement running time

    ### 0.4 second 250 samples ###
    y21 = np.array([0.481895526991, 0.502435082235, 0.477604294454])
    y22 = np.array([0.484096431055, 0.547388536198, 0.527218957033])
    y21Time = np.array([3.13074523211, 12.843314449, 1.8500829339])
    y22Time = np.array([2.08656423092, 6.61259760062, 0.915222386519])


    ### 1 second 250 samples ###
    y31 = np.array([0.476979789077, 0.426403932848, 0.230243147233])
    y32 = np.array([0.493940646878, 0.432675026532, 0.256987651878])
    y31Time = np.array([2.44641275009, 8.63757639726, 1.36092446645])
    y32Time = np.array([1.87808943192, 5.39195519686, 0.809603516261])


    ### 0.1 second 500 samples ###
    y41 = np.array([0.575351603795, 0.545608891899, 0.482586172286])
    y42 = np.array([0.497187210384, 0.325629106203, 0.48035508173])
    y41Time = np.array([9.88204243581, 117.876455931, 8.95387310187])
    y42Time = np.array([5.61709493399, 58.9521595478, 4.11334386667])


    ### 0.4 second 500 samples ###
    y51 = np.array([0.520243340183, 0.549934482832, 0.490374753898])
    y52 = np.array([0.568278005267, 0.531900679166, 0.447671368431])
    y51Time = np.array([7.45867261489, 82.9679923495, 6.47322809696])
    y52Time = np.array([4.2855575641, 39.6674031655, 2.77684978247])


    ### 1 second 500 samples ###
    y61 = np.array([0.533929320355, 0.557498341682, 0.399017634117])
    y62 = np.array([0.527708160561, 0.569745009773, 0.441972795004])
    y61Time = np.array([5.46284351746, 56.1855682333, 4.83808281819])
    y62Time = np.array([3.56122131348, 32.4839298328, 2.40308681329])


    width = 0.35

    subplot1.set_title("0.1 sec (250 samples)")
    subplot2.set_title("0.4 sec (250 samples)")
    subplot3.set_title("1 sec (250 samples)")

    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.56])
    pL11 = subplot1.plot(x, y11, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL12 = subplot1.plot(x, y12, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot1.text(x[0]-0.03, y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
    subplot1.text(x[1]-0.01, y11[1]-0.02, str("%.3f" % (y11[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')

    subplot1.text(x[0]-0.04, y12[0]-0.02, str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1], y12[1]-0.01, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2]-0.01, y12[2], str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 20.0])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y11Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y11Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y12Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.65, -1.28), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.56])
    pL21 = subplot2.plot(x, y21, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot2.text(x[0], y21[0]-0.02, str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1], y21[1], str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0], y22[0]+0.01, str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1]-0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 20.0])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y22Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.22, 0.56])
    pL31 = subplot3.plot(x, y31, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    subplot3.text(x[1]-0.4, y31[1]-0.01, str("%.3f" % (y31[1]-0.0005)), weight='bold')
    subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y31):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1]+0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2]+0.01, y32[2]+0.01, str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 20.0], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL33.bar(x, y32Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    pL33.text(x[0]-width/2-0.001, y31Time[0], str("%.2f" % (y31Time[0]-0.005)))
    pL33.text(x[1]-width/2-0.001, y31Time[1], str("%.2f" % (y31Time[1]-0.005)))
    # pL33.text(x[2]-width/2-0.001, y31Time[2], str("%.2f" % (y31Time[2]-0.005)))

    pL33.text(x[0]-0.001, y32Time[0], str("%.2f" % (y32Time[0]-0.005)))
    pL33.text(x[1]-0.001, y32Time[1], str("%.2f" % (y32Time[1]-0.005)))
    # pL33.text(x[2]-width/2-0.001, y32Time[2], str("%.2f" % (y32Time[2]-0.005)))
    # for xCor, yCor in zip(x-width/2-0.001, y31Time):
    #     pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    # for xCor, yCor in zip(x-0.001, y32Time):
    #     pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################

    subplot4.set_title("0.1 sec (500 samples)")
    subplot5.set_title("0.4 sec (500 samples)")
    subplot6.set_title("1 sec (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL41 = subplot4.plot(x, y41, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    for xCor, yCor in zip(x, y41):
        subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1], y42[1], str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2]-0.2, y42[2]-0.02, str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 120.0])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL43.bar(x, y42Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y42Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL51 = subplot5.plot(x, y51, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0], y51[0], str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1], y51[1], str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2], str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0], y52[0], str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2]-0.2, y52[2]-0.015, str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 120.0])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL53.bar(x, y52Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y52Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.3, 0.6])
    pL61 = subplot6.plot(x, y61, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0], y61[0]+0.01, str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1]-0.01, str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2], str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0], y62[0]-0.01, str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2]-0.2, y62[2]-0.015, str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0, 120.0], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL63.bar(x, y62Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    # for xCor, yCor in zip(x-width/2-0.001, y61Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    # for xCor, yCor in zip(x-0.001, y62Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    pL63.text(x[0]-width/2-0.001, y61Time[0], str("%.2f" % (y61Time[0]-0.005)))
    pL63.text(x[1]-width/2-0.001, y61Time[1], str("%.2f" % (y61Time[1]-0.005)))
    pL63.text(x[2]-width/2-0.001, y61Time[2], str("%.2f" % (y61Time[2]-0.005)))

    pL63.text(x[0]+0.11, y62Time[0], str("%.2f" % (y62Time[0]-0.005)))
    pL63.text(x[1], y62Time[1], str("%.2f" % (y62Time[1]-0.005)))
    pL63.text(x[2]+0.11, y62Time[2], str("%.2f" % (y62Time[2]-0.005)))
    ################


    fig.tight_layout()
    fig.savefig('apiSequencesTimeWindowNoRefinement.png', bbox_inches='tight')
###___ api sequences time window no refinement___



###>>> api sequences Argument refined training >>>###
if False:
    plt.rcParams["figure.figsize"] = [14, 7.5]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 2-gram 250 samples ###
    #                    KMeans         MeanShift       BIRCH
    y11 = np.array([0.640667008498, 0.462628789612, 0.66224551395])    # refinement training score
    y12 = np.array([0.527630830464, 0.286483356444, 0.533964265145])    # refinement prediction score
    # y11Time = np.array([109.561759609, 112.489807768, 107.064992869])   # refinement running time
    y11Time = np.array([33.7187603156, 52.0282783031, 24.6434784492])   # refinement running time

    ### 3-gram 250 samples ###
    y21 = np.array([0.66118811599, 0.529053453599, 0.627884918679])
    y22 = np.array([0.52193024133, 0.423638292303, 0.574450493561])
    # y21Time = np.array([122.249568498, 131.551348635, 115.356182535])
    y21Time = np.array([49.0673549493, 132.911587067, 30.1500095685])


    # ### 4-gram second 250 samples ###
    y31 = np.array([0.648957679402, 0.551635697266, 0.619290467483])
    y32 = np.array([0.558862700416, 0.556688724965, 0.568231151962])
    # y31Time = np.array([130.312209332, 148.803216648, 122.549560817])
    y31Time = np.array([59.1125341495, 197.492841649, 35.3371357004])
    #
    #
    # ### 2-gram second 500 samples ###
    y41 = np.array([0.615930961765, 0.480431841923, 0.590337444075])
    y42 = np.array([0.541604570074, 0.373910230765, 0.613325297665])
    # y41Time = np.array([243.823403235, 258.50634863, 232.129372414])
    y41Time = np.array([81.1051003655, 197.330383201, 50.8504729509])
    #
    #
    # ### 3-gram second 500 samples ###
    y51 = np.array([0.597134069227, 0.485476170073, 0.561280848491])
    y52 = np.array([0.566632012388, 0.367052802687, 0.575244862193])
    # y51Time = np.array([261.69115295, 320.443655431, 253.059987084])
    y51Time = np.array([118.067048752, 679.982994501, 67.0742653529])
    #
    #
    # ### 4-gram 500 samples ###
    y61 = np.array([0.600624975347, 0.544195643521, 0.5555453368])
    y62 = np.array([0.574102093735, 0.50728031102, 0.557861559128])
    # y61Time = np.array([281.764285684, 394.786914968, 268.156448968])
    y61Time = np.array([146.506188285, 1234.97900682, 83.5136923671])


    width = 0.35

    subplot1.set_title("2-grams (250 samples)")
    subplot2.set_title("3-grams (250 samples)")
    subplot3.set_title("4-grams (250 samples)")

    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.26, 0.70])
    pL11 = subplot1.plot(x, y11, 'k--', label='Optimization Score', zorder=10)
    pL12 = subplot1.plot(x, y12, 'k-.', label='Evaluation Score', zorder=10)
    subplot1.text(x[0], y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
    subplot1.text(x[1], y11[1]+0.01, str("%.3f" % (y11[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')

    subplot1.text(x[0], y12[0], str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1], y12[1]-0.01, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2], y12[2]+0.01, str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 205.0])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y11Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y11Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.6, -1.28), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html

    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.26, 0.70])
    pL21 = subplot2.plot(x, y21, 'k--', label='Optimization Score', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score', zorder=10)
    subplot2.text(x[0], y21[0], str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1]-0.02, y21[1]-0.025, str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0], y22[0], str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1]+0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 205.0])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.26, 0.70])
    pL31 = subplot3.plot(x, y31, 'k--', label='Optimization Score', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score', zorder=10)
    subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    subplot3.text(x[1], y31[1]-0.02, str("%.3f" % (y31[1]-0.0005)), weight='bold')
    subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y31):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1], str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 205.0], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y31Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################

    subplot4.set_title("2-grams (500 samples)")
    subplot5.set_title("3-grams (500 samples)")
    subplot6.set_title("4-grams (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.34, 0.63])
    pL41 = subplot4.plot(x, y41, 'k--', label='Optimization Score', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score', zorder=10)
    subplot4.text(x[0]-0.02, y41[0], str("%.3f" % (y41[0]-0.0005)), weight='bold')
    subplot4.text(x[1], y41[1], str("%.3f" % (y41[1]-0.0005)), weight='bold')
    subplot4.text(x[2], y41[2], str("%.3f" % (y41[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y41):
    #     subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1]-0.04, y42[1]-0.013, str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2], y42[2], str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[45, 1300.0])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.34, 0.63])
    pL51 = subplot5.plot(x, y51, 'k--', label='Optimization Score', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0]-0.06, y51[0], str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1]-0.06, y51[1]-0.02, str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2], str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0]-0.02, y52[0]-0.01, str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2], y52[2], str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[45, 1300.0])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.34, 0.63])
    pL61 = subplot6.plot(x, y61, 'k--', label='Optimization Score', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0], y61[0], str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1], str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2], str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0], y62[0], str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2], y62[2]+0.012, str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[45, 1300.0], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y61Time):
        pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    fig.tight_layout()
    fig.savefig('apiSequencesArgument_RefinedTraining.png', bbox_inches='tight')
###___ api sequences Argument refined training ___



###>>> api sequences Argument normal refined >>>###
if False:
    plt.rcParams["figure.figsize"] = [15, 8]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 2-gram 250 samples ###
    #                    KMeans         MeanShift       BIRCH
    y11 = np.array([0.515435622591, 0.382802777623, 0.506186565371])    # no refinement prediction score
    y12 = np.array([0.527630830464, 0.286483356444, 0.533964265145])    # refinement prediction score
    y11Time = np.array([117.9365062, 136.168864433, 107.067943919])   # no refinement running time
    y12Time = np.array([33.7187603156, 52.0282783031, 24.6434784492])   # refinement running time

    ### 3-gram 250 samples ###
    y21 = np.array([0.504422034097, 0.417938267517, 0.494061233054])
    y22 = np.array([0.52193024133, 0.423638292303, 0.574450493561])
    y21Time = np.array([132.349017918, 210.203581536, 121.965390114])
    y22Time = np.array([49.0673549493, 132.911587067, 30.1500095685])


    # ### 4-gram second 250 samples ###
    y31 = np.array([0.481524111382, 0.345102301878, 0.554272032214])
    y32 = np.array([0.558862700416, 0.556688724965, 0.568231151962])
    y31Time = np.array([146.298843114, 290.415002584, 130.773151819])
    y32Time = np.array([59.1125341495, 197.492841649, 35.3371357004])
    #
    #
    # ### 2-gram second 500 samples ###
    y41 = np.array([0.548442630848, 0.430863551104, 0.521016046788])
    y42 = np.array([0.541604570074, 0.373910230765, 0.613325297665])
    y41Time = np.array([242.374694868, 367.258108834, 225.825392719])
    y42Time = np.array([81.1051003655, 197.330383201, 50.8504729509])
    #
    #
    # ### 3-gram second 500 samples ###
    y51 = np.array([0.526573511287, 0.430502173997, 0.520400442647])
    y52 = np.array([0.566632012388, 0.367052802687, 0.575244862193])
    y51Time = np.array([289.213213066, 843.613555169, 263.569552068])
    y52Time = np.array([118.067048752, 679.982994501, 67.0742653529])
    #
    #
    # ### 4-gram 500 samples ###
    y61 = np.array([0.481358512522, 0.387924144805, 0.517955232487])
    y62 = np.array([0.574102093735, 0.50728031102, 0.557861559128])
    y61Time = np.array([322.2546604, 1486.89118763, 291.360053349])
    y62Time = np.array([146.506188285, 1234.97900682, 83.5136923671])


    width = 0.35

    subplot1.set_title("2-grams (250 samples)")
    subplot2.set_title("3-grams (250 samples)")
    subplot3.set_title("4-grams (250 samples)")


    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.60])
    pL11 = subplot1.plot(x, y11, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL12 = subplot1.plot(x, y12, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot1.text(x[0], y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
    subplot1.text(x[1]-0.015, y11[1]-0.01, str("%.3f" % (y11[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')

    subplot1.text(x[0], y12[0]+0.01, str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1]-0.015, y12[1]-0.015, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2]-0.01, y12[2], str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 310])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y11Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y11Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y12Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='lower center', bbox_to_anchor=(1.65, -1.43), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.60])
    pL21 = subplot2.plot(x, y21, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot2.text(x[0], y21[0], str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1], y21[1], str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2]-0.01, y21[2]-0.013, str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0], y22[0], str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1]+0.01, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 310])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y22Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    # ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.60])
    pL31 = subplot3.plot(x, y31, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot3.text(x[0]-0.18, y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    subplot3.text(x[1]-0.12, y31[1]+0.02, str("%.3f" % (y31[1]-0.0005)), weight='bold')
    subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y31):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1], str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2]+0.01, y32[2]+0.01, str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 310], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL33.bar(x, y32Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y31Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y32Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    subplot4.set_title("2-grams (500 samples)")
    subplot5.set_title("3-grams (500 samples)")
    subplot6.set_title("4-grams (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.65])
    pL41 = subplot4.plot(x, y41, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score (refinement)', zorder=10)

    subplot4.text(x[0], y41[0]+0.01, str("%.3f" % (y41[0]-0.0005)), weight='bold')
    subplot4.text(x[1]-0.015, y41[1]+0.01, str("%.3f" % (y41[1]-0.0005)), weight='bold')
    subplot4.text(x[2], y41[2], str("%.3f" % (y41[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y41):
    #     subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')

    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1]-0.015, y42[1]-0.01, str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2]-0.2, y42[2]-0.02, str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[40, 1510])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL43.bar(x, y42Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y42Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.65])
    pL51 = subplot5.plot(x, y51, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0], y51[0], str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1], y51[1], str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2]-0.02, str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0], y52[0], str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2], y52[2], str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[40, 1510.0])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL53.bar(x, y52Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y52Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.65])
    pL61 = subplot6.plot(x, y61, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0]-0.04, y61[0], str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1], str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2], str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0], y62[0], str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2], y62[2], str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[40, 1510.0], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL63.bar(x, y62Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    # for xCor, yCor in zip(x-width/2-0.001, y61Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    # for xCor, yCor in zip(x-0.001, y62Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    pL63.text(x[0]-width/2-0.001, y61Time[0], str("%.2f" % (y61Time[0]-0.005)))
    pL63.text(x[1]-width/2-0.001, y61Time[1], str("%.2f" % (y61Time[1]-0.005)))
    pL63.text(x[2]-width/2-0.001, y61Time[2], str("%.2f" % (y61Time[2]-0.005)))

    pL63.text(x[0]+0.11, y62Time[0], str("%.2f" % (y62Time[0]-0.005)))
    pL63.text(x[1], y62Time[1], str("%.2f" % (y62Time[1]-0.005)))
    pL63.text(x[2]+0.11, y62Time[2], str("%.2f" % (y62Time[2]-0.005)))
    ################

    fig.tight_layout()
    fig.savefig('apiSequencesArgument_NormalRefined.png', bbox_inches='tight')

###___ api sequences Argument normal refined___


###>>> api sequences Naive refined training >>>###
if False:
    plt.rcParams["figure.figsize"] = [14, 7.5]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 2-gram 250 samples ###
    #                    KMeans         MeanShift       BIRCH
    y11 = np.array([0.723987336044, 0.520669668673, 0.731468813103])    # refinement training score
    y12 = np.array([0.66904957369, 0.486113755123, 0.6681106737])    # refinement prediction score
    # y11Time = np.array([109.561759609, 112.489807768, 107.064992869])
    y11Time = np.array([10.0782880664, 11.9244925857, 6.30635086695])   # refinement running time

    ### 3-gram 250 samples ###
    y21 = np.array([0.74065309371, 0.541219803083, 0.703308425001])
    y22 = np.array([0.670276818218, 0.479218721918, 0.613711015043])
    # y21Time = np.array([122.249568498, 131.551348635, 115.356182535])
    y21Time = np.array([13.075392282, 20.813281699, 7.3302322348])


    # ### 4-gram second 250 samples ###
    y31 = np.array([0.75588561326, 0.58500464338, 0.714652040171])
    y32 = np.array([0.694559491864, 0.502654917477, 0.700202573186])
    # y31Time = np.array([130.312209332, 148.803216648, 122.549560817])
    y31Time = np.array([15.6701707363, 30.0884064158, 8.03581193288])
    #
    #
    # ### 2-gram second 500 samples ###
    y41 = np.array([0.695974903872, 0.460212045011, 0.714976573566])
    y42 = np.array([0.731377232732, 0.492265445549, 0.722633339414])
    # y41Time = np.array([243.823403235, 258.50634863, 232.129372414])
    y41Time = np.array([23.4506355166, 38.4909737825, 14.135124282])
    #
    #
    # ### 3-gram second 500 samples ###
    y51 = np.array([0.712707928436, 0.571860075364, 0.721690006498])
    y52 = np.array([0.742464171876, 0.480805438998, 0.695002372852])
    # y51Time = np.array([261.69115295, 320.443655431, 253.059987084])
    y51Time = np.array([30.9526712179, 79.8410939177, 16.3765351852])
    #
    #
    # ### 4-gram 500 samples ###
    y61 = np.array([0.756885075756, 0.538561976932, 0.706786865784])
    y62 = np.array([0.775628935346, 0.452720675533, 0.728887397435])
    # y61Time = np.array([281.764285684, 394.786914968, 268.156448968])
    y61Time = np.array([37.7855898857, 124.939970485, 18.2387300332])


    width = 0.35

    subplot1.set_title("2-grams (250 samples)")
    subplot2.set_title("3-grams (250 samples)")
    subplot3.set_title("4-grams (250 samples)")

    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.45, 0.77])
    pL11 = subplot1.plot(x, y11, 'k--', label='Optimization Score', zorder=10)
    pL12 = subplot1.plot(x, y12, 'k-.', label='Evaluation Score', zorder=10)
    subplot1.text(x[0], y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
    subplot1.text(x[1]-0.01, y11[1]-0.015, str("%.3f" % (y11[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')

    subplot1.text(x[0], y12[0], str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1], y12[1]-0.01, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2], y12[2]+0.01, str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[5, 35.0])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y11Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y11Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.6, -1.28), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html

    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.45, 0.77])
    pL21 = subplot2.plot(x, y21, 'k--', label='Optimization Score', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score', zorder=10)
    subplot2.text(x[0], y21[0], str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1]-0.02, y21[1]+0.02, str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0], y22[0], str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1], y22[1], str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[5, 35.0])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.45, 0.77])
    pL31 = subplot3.plot(x, y31, 'k--', label='Optimization Score', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    for xCor, yCor in zip(x, y31):
        subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1], str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2]-0.2, y32[2]-0.025, str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[5, 35.0], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y31Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################

    subplot4.set_title("2-grams (500 samples)")
    subplot5.set_title("3-grams (500 samples)")
    subplot6.set_title("4-grams (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.43, 0.8])
    pL41 = subplot4.plot(x, y41, 'k--', label='Optimization Score', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score', zorder=10)
    subplot4.text(x[0], y41[0], str("%.3f" % (y41[0]-0.0005)), weight='bold')
    subplot4.text(x[1], y41[1], str("%.3f" % (y41[1]-0.0005)), weight='bold')
    subplot4.text(x[2], y41[2]-0.02, str("%.3f" % (y41[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y41):
    #     subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1], y42[1], str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2]-0.2, y42[2]+0.005, str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[12, 130.0])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.43, 0.8])
    pL51 = subplot5.plot(x, y51, 'k--', label='Optimization Score', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0]-0.06, y51[0], str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1]-0.06, y51[1]-0.03, str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2], str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0]-0.02, y52[0]-0.01, str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2]-0.2, y52[2]-0.015, str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[12, 130.0])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.43, 0.8])
    pL61 = subplot6.plot(x, y61, 'k--', label='Optimization Score', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0], y61[0]-0.01, str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1], str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2]-0.01, str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0]-0.08, y62[0], str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2], y62[2]+0.01, str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[12, 130.0], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
    for xCor, yCor in zip(x-width/3, y61Time):
        pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    fig.tight_layout()
    fig.savefig('apiSequencesNaive_RefinedTraining.png', bbox_inches='tight')
###___ api sequences Naive refined training ___



###>>> api sequences Naive normal refined >>>###
if False:
    plt.rcParams["figure.figsize"] = [15, 8]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<

    #fig, ax1 = plt.subplots()
    fig, ((subplot1, subplot2, subplot3), (subplot4, subplot5, subplot6)) = plt.subplots(2, 3, sharey='row')
    # print(fig.get_size_inches())
    # fig.set_size_inches(10.5, 30.5)

    my_xticks = ['KMeans','MeanShift','BIRCH']
    x = np.array([0.5, 1.5, 2.5])


    ### 2-gram 250 samples ###
    #                    KMeans         MeanShift       BIRCH
    y11 = np.array([0.540996814396, 0.428557210537, 0.626793999043])    # no refinement prediction score
    y12 = np.array([0.66904957369, 0.486113755123, 0.6681106737])       # refinement prediction score
    y11Time = np.array([101.104445601, 104.321310918, 98.0490030487]) # no refinement running time
    y12Time = np.array([10.0782880664, 11.9244925857, 6.30635086695])   # refinement running time

    ### 3-gram 250 samples ###
    y21 = np.array([0.613094313082, 0.447815055754, 0.55400153152])
    y22 = np.array([0.670276818218, 0.479218721918, 0.613711015043])
    y21Time = np.array([109.059662982, 118.647666816, 103.975498966])
    y22Time = np.array([13.075392282, 20.813281699, 7.3302322348])


    # ### 4-gram second 250 samples ###
    y31 = np.array([0.613965022544, 0.385552567557, 0.579623502756])
    y32 = np.array([0.694559491864, 0.502654917477, 0.700202573186])
    y31Time = np.array([115.519672783, 133.377097714, 109.383534431])
    y32Time = np.array([15.6701707363, 30.0884064158, 8.03581193288])
    #
    #
    # ### 2-gram second 500 samples ###
    y41 = np.array([0.537798860701, 0.28784353219, 0.546726541273])
    y42 = np.array([0.731377232732, 0.492265445549, 0.722633339414])
    y41Time = np.array([217.366068236, 239.522077783, 214.040750917])
    y42Time = np.array([23.4506355166, 38.4909737825, 14.135124282])
    #
    #
    # ### 3-gram second 500 samples ###
    y51 = np.array([0.62133028913, 0.338040844679, 0.538777989302])
    y52 = np.array([0.742464171876, 0.480805438998, 0.695002372852])
    y51Time = np.array([234.639499803, 293.813507183, 225.962983565])
    y52Time = np.array([30.9526712179, 79.8410939177, 16.3765351852])
    #
    #
    # ### 4-gram 500 samples ###
    y61 = np.array([0.618438987811, 0.326423826616, 0.584341653132])
    y62 = np.array([0.775628935346, 0.452720675533, 0.728887397435])
    y61Time = np.array([251.058462266, 354.150170334, 236.7901341])
    y62Time = np.array([37.7855898857, 124.939970485, 18.2387300332])


    width = 0.35

    subplot1.set_title("2-grams (250 samples)")
    subplot2.set_title("3-grams (250 samples)")
    subplot3.set_title("4-grams (250 samples)")


    ### subplot1 ###
    plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.75])
    pL11 = subplot1.plot(x, y11, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL12 = subplot1.plot(x, y12, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot1.text(x[0]-0.4, y11[0]+0.01, str("%.3f" % (y11[0]-0.0005)), weight='bold')
    subplot1.text(x[1]-0.01, y11[1]-0.02, str("%.3f" % (y11[1]-0.0005)), weight='bold')
    subplot1.text(x[2], y11[2]-0.03, str("%.3f" % (y11[2]-0.0005)), weight='bold')

    subplot1.text(x[0]-0.04, y12[0], str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[1]-0.05, y12[1]+0.015, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
    subplot1.text(x[2]-0.01, y12[2], str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')

    # for xCor, yCor in zip(x, y):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y2):
    #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL13 = subplot1.twinx()
    plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[7, 142])#, ylabel='execution time (minutes)')
    pL13.bar(x - width / 2, y11Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y11Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y12Time):
        pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))

    h1, l1 = subplot1.get_legend_handles_labels()
    h2, l2 = pL13.get_legend_handles_labels()

    lgd = subplot1.legend(h1 + h2, l1 + l2, loc='lower center', bbox_to_anchor=(1.65, -1.43), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
    ################


    ### subplot2 ###
    plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.75])
    pL21 = subplot2.plot(x, y21, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL22 = subplot2.plot(x, y22, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot2.text(x[0]-0.07, y21[0], str("%.3f" % (y21[0]-0.0005)), weight='bold')
    subplot2.text(x[1], y21[1], str("%.3f" % (y21[1]-0.0005)), weight='bold')
    subplot2.text(x[2]-0.01, y21[2]-0.013, str("%.3f" % (y21[2]-0.0005)), weight='bold')

    subplot2.text(x[0]-0.08, y22[0]+0.008, str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[1]-0.02, y22[1], str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
    subplot2.text(x[2]-0.02, y22[2]-0.01, str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y21):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y22):
    #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')

    pL23 = subplot2.twinx()
    plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[7, 142])#, ylabel='execution time (minutes)')
    pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y21Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y22Time):
        pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    # ### subplot3 ###
    plt.setp(subplot3, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.35, 0.75])
    pL31 = subplot3.plot(x, y31, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL32 = subplot3.plot(x, y32, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    subplot3.text(x[0]-0.04, y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y31):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[0]-0.04, y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[1], y32[1]+0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')

    pL33 = subplot3.twinx()
    plt.setp(pL33, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[7, 142], ylabel='execution time (minutes)')
    pL33.bar(x - width / 2, y31Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL33.bar(x, y32Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y31Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y32Time):
        pL33.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    subplot4.set_title("2-grams (500 samples)")
    subplot5.set_title("3-grams (500 samples)")
    subplot6.set_title("4-grams (500 samples)")

    ### subplot4 ###
    plt.setp(subplot4, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.8])
    pL41 = subplot4.plot(x, y41, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL42 = subplot4.plot(x, y42, 'k-.', label='Evaluation Score (refinement)', zorder=10)

    subplot4.text(x[0], y41[0], str("%.3f" % (y41[0]-0.0005)), weight='bold')
    subplot4.text(x[1], y41[1]-0.02, str("%.3f" % (y41[1]-0.0005)), weight='bold')
    subplot4.text(x[2]-0.02, y41[2]-0.02, str("%.3f" % (y41[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y41):
    #     subplot4.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')

    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[0], y42[0], str("%.3f" % (y42[0]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[1], y42[1], str("%.3f" % (y42[1]-0.0005)), family='fantasy', style='italic')
    subplot4.text(x[2]-0.2, y42[2]-0.02, str("%.3f" % (y42[2]-0.0005)), family='fantasy', style='italic')

    pL43 = subplot4.twinx()
    plt.setp(pL43, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[10, 373])#, ylabel='execution time (minutes)')
    pL43.bar(x - width / 2, y41Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL43.bar(x, y42Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y41Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y42Time):
        pL43.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot5 ###
    plt.setp(subplot5, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.8])
    pL51 = subplot5.plot(x, y51, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL52 = subplot5.plot(x, y52, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y51):
    #     subplot5.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot5.text(x[0]-0.1, y51[0]+0.02, str("%.3f" % (y51[0]-0.0005)), weight='bold')
    subplot5.text(x[1]-0.01, y51[1]-0.03, str("%.3f" % (y51[1]-0.0005)), weight='bold')
    subplot5.text(x[2], y51[2]-0.02, str("%.3f" % (y51[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[0], y52[0], str("%.3f" % (y52[0]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[1], y52[1], str("%.3f" % (y52[1]-0.0005)), family='fantasy', style='italic')
    subplot5.text(x[2]-0.2, y52[2]-0.015, str("%.3f" % (y52[2]-0.0005)), family='fantasy', style='italic')

    pL53 = subplot5.twinx()
    plt.setp(pL53, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[10, 373])#, ylabel='execution time (minutes)')
    pL53.bar(x - width / 2, y51Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL53.bar(x, y52Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    for xCor, yCor in zip(x-width/2-0.001, y51Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    for xCor, yCor in zip(x-0.001, y52Time):
        pL53.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    ################


    ### subplot6 ###
    plt.setp(subplot6, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.25, 0.8])
    pL61 = subplot6.plot(x, y61, 'k--', label='Evaluation Score (no refinement)', zorder=10)
    pL62 = subplot6.plot(x, y62, 'k-.', label='Evaluation Score (refinement)', zorder=10)
    # subplot3.text(x[0], y31[0], str("%.3f" % (y31[0]-0.0005)), weight='bold')
    # subplot3.text(x[1], y31[1], str("%.3f" % (y31[1]-0.0005)), weight='bold')
    # subplot3.text(x[2], y31[2], str("%.3f" % (y31[2]-0.0005)), weight='bold')
    #
    # subplot3.text(x[0], y32[0], str("%.3f" % (y32[0]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[1], y32[1]-0.01, str("%.3f" % (y32[1]-0.0005)), family='fantasy', style='italic')
    # subplot3.text(x[2], y32[2], str("%.3f" % (y32[2]-0.0005)), family='fantasy', style='italic')
    # for xCor, yCor in zip(x, y61):
    #     subplot6.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
    subplot6.text(x[0]-0.12, y61[0]+0.03, str("%.3f" % (y61[0]-0.0005)), weight='bold')
    subplot6.text(x[1], y61[1]-0.01, str("%.3f" % (y61[1]-0.0005)), weight='bold')
    subplot6.text(x[2], y61[2]-0.015, str("%.3f" % (y61[2]-0.0005)), weight='bold')
    # for xCor, yCor in zip(x, y32):
    #     subplot3.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[0], y62[0]-0.01, str("%.3f" % (y62[0]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[1], y62[1], str("%.3f" % (y62[1]-0.0005)), family='fantasy', style='italic')
    subplot6.text(x[2]-0.2, y62[2]-0.015, str("%.3f" % (y62[2]-0.0005)), family='fantasy', style='italic')

    pL63 = subplot6.twinx()
    plt.setp(pL63, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[10, 373], ylabel='execution time (minutes)')
    pL63.bar(x - width / 2, y61Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
    pL63.bar(x, y62Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
    # for xCor, yCor in zip(x-width/2-0.001, y61Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    # for xCor, yCor in zip(x-0.001, y62Time):
    #     pL63.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
    pL63.text(x[0]-width/2-0.001, y61Time[0], str("%.2f" % (y61Time[0]-0.005)))
    pL63.text(x[1]-width/2-0.001, y61Time[1], str("%.2f" % (y61Time[1]-0.005)))
    pL63.text(x[2]-width/2-0.001, y61Time[2], str("%.2f" % (y61Time[2]-0.005)))

    pL63.text(x[0]+0.11, y62Time[0], str("%.2f" % (y62Time[0]-0.005)))
    pL63.text(x[1], y62Time[1], str("%.2f" % (y62Time[1]-0.005)))
    pL63.text(x[2]+0.11, y62Time[2], str("%.2f" % (y62Time[2]-0.005)))
    ################

    fig.tight_layout()
    fig.savefig('apiSequencesNaive_NormalRefined.png', bbox_inches='tight')

###___ api sequences Naive normal refined___



###>>> Homogeneity Completeness >>>###
if False:
    # 250 refined
    # KMeans
    # API Statistics, Temporal, Argument, Naive
    X_250_refined_KMeans = [0.479414870986, 0.484170670975, 0.615884105631, 0.639016924941]
    Y_250_refined_KMeans = [0.565019774673, 0.626431168786, 0.753899707667, 0.76067656544]

    # MeanShift
    # API Statistics, Temporal, Argument, Naive
    X_250_refined_MeanShift = [0.141181741505, 0.47008224099, 0.36261677121, 0.36261677121]
    Y_250_refined_MeanShift = [0.828481429741, 0.655125734027, 0.818906592023, 0.818906592023]

    # BIRCH
    # API Statistics, Temporal, Argument, Naive
    X_250_refined_BIRCH = [0.495948104326, 0.466655344669, 0.573176474839, 0.602778317818]
    Y_250_refined_BIRCH = [0.622485876166, 0.634171511421, 0.721555551046, 0.749326735209]



    # 250 normal
    # KMeans
    # API Statistics, Temporal, Argument, Naive
    X_250_normal_KMeans = [0.479414870986, 0.374303337638, 0.552491252371, 0.563250067977]
    Y_250_normal_KMeans = [0.565019774673, 0.676293830632, 0.664425081708, 0.674716388468]

    # MeanShift
    # API Statistics, Temporal, Argument, Naive
    X_250_normal_MeanShift = [0.141181741505, 0.458622004765, 0.270134393746, 0.354942170682]
    Y_250_normal_MeanShift = [0.828481429741, 0.628239241818, 0.673174468316, 0.606513073763]

    # BIRCH
    # API Statistics, Temporal, Argument, Naive
    X_250_normal_BIRCH = [0.495948104326, 0.373702087597, 0.539758775146, 0.527107008487]
    Y_250_normal_BIRCH = [0.622485876166, 0.661533731569, 0.651495985227, 0.643762573068]




    # 500 refined
    # KMeans
    # API Statistics, Temporal, Argument, Naive
    X_500_refined_KMeans = [0.473338786557, 0.501196338208, 0.656777124236, 0.756398973129]
    Y_500_refined_KMeans = [0.568254796841, 0.656091291663, 0.75026067649, 0.795862172094]

    # MeanShift
    # API Statistics, Temporal, Argument, Naive
    X_500_refined_MeanShift = [0.157656938872, 0.498553994851, 0.344358177809, 0.344358177809]
    Y_500_refined_MeanShift = [0.742184684133, 0.664654319652, 0.796347241143, 0.796347241143]

    # BIRCH
    # API Statistics, Temporal, Argument, Naive
    X_500_refined_BIRCH = [0.502499778949, 0.391000062513, 0.593231212598, 0.636190942368]
    Y_500_refined_BIRCH = [0.644128858614, 0.62264861021, 0.764815249989, 0.765794776976]




    # 500 noraml
    # KMeans
    # API Statistics, Temporal, Argument, Naive
    X_500_normal_KMeans = [0.473338786557, 0.504704505037, 0.516885039743, 0.58001096216]
    Y_500_normal_KMeans = [0.568254796841, 0.668995718574, 0.609865480761, 0.668988258358]

    # MeanShift
    # API Statistics, Temporal, Argument, Naive
    X_500_normal_MeanShift = [0.157656938872, 0.483387980295, 0.213911903499, 0.213911903499]
    Y_500_normal_MeanShift = [0.742184684133, 0.658447921297, 0.688618891596, 0.688618891596]

    # BIRCH
    # API Statistics, Temporal, Argument, Naive
    X_500_normal_BIRCH = [0.502499778949, 0.377612467126, 0.496179701183, 0.532343721219]
    Y_500_normal_BIRCH = [0.644128858614, 0.699156105492, 0.631380337521, 0.647597245603]

    plt.rcParams["figure.figsize"] = [12, 6]
    fig, (subplot1, subplot2) = plt.subplots(1, 2, sharey=True)

    subplot1.set_title("Completeness vs. Homogeneity (250 samples)")
    subplot2.set_title("Completeness vs. Homogeneity (500 samples)")

    plt.setp(subplot1, xlim=[0, 1], ylim=[0, 1])#, xticks=x, xticklabels=my_xticks)  # , ylabel='score')
    subplot1.plot([0, 1], [0, 1], 'k-', lw=1.5)
    pL11 = subplot1.plot(X_250_refined_KMeans, Y_250_refined_KMeans, 'k--', label='KMeans with refinement', zorder=10)
    pL12 = subplot1.plot(X_250_refined_MeanShift, Y_250_refined_MeanShift, 'k:', label='MeanShift with refinement', zorder=10)
    # pL13 = subplot1.plot(X_250_refined_BIRCH, Y_250_refined_BIRCH, 'k-.', label='BIRCH with refinement', zorder=10)
    pL14 = subplot1.plot(X_250_normal_KMeans, Y_250_normal_KMeans, 'k-.', label='KMeans without refinement', zorder=10)
    pL15 = subplot1.plot(X_250_normal_MeanShift, Y_250_normal_MeanShift, 'k--', label='MeanShift without refinement', zorder=10)
    # pL16 = subplot1.plot(X_250_normal_BIRCH, Y_250_normal_BIRCH, 'k-.', label='BIRCH without refinement', zorder=10)

    # pL12 = subplot1.plot(x, y2, 'k-.', label='Prediction Score', zorder=10)

    fig.tight_layout()
    fig.savefig('homogeneityCompleteness.png', bbox_inches='tight')
###___ Homogeneity Completeness ___###



###>>> api sequences Primitive training scores OLD >>>###
# plt.rcParams["figure.figsize"] = [12, 6]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<
#
# #fig, ax1 = plt.subplots()
# fig, (subplot1, subplot2) = plt.subplots(1, 2, sharey='row')
# # print(fig.get_size_inches())
# # fig.set_size_inches(10.5, 30.5)
#
# my_xticks = ['KMeans','MeanShift','BIRCH']
# x = np.array([0.5, 1.5, 2.5])
#
#
# ### 250 samples ###
# y11 = np.array([0.75588561326, 0.58500464338, 0.731468813103]) # refinement training score
# y12 = np.array([0.694559491864, 0.502654917477, 0.6681106737])   # refinement prediction score
# y11Time = np.array([37.4366648515, 62.1315805356, 21.3180148482]) # refinement running time
#
# ### 500 samples ###
# y21 = np.array([0.756885075756, 0.571860075364, 0.721690006498])
# y22 = np.array([0.775628935346, 0.480805438998, 0.695002372852])
# y21Time = np.array([91.2272089998, 239.958236881, 47.3285961509])
#
# width = 0.35
#
# subplot1.set_title("Primitive with refinement (250 samples)")
# subplot2.set_title("Primitive with refinement (500 samples)")
# # subplot3.set_title("1 sec (250 samples)")
#
# ### subplot1 ###
# plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.46, 0.80])
# pL11 = subplot1.plot(x, y11, 'k--', label='Training Score', zorder=10)
# pL12 = subplot1.plot(x, y12, 'k-.', label='Prediction Score', zorder=10)
# subplot1.text(x[0]-0.03, y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
# subplot1.text(x[1]-0.01, y11[1], str("%.3f" % (y11[1]-0.0005)), weight='bold')
# subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')
#
# subplot1.text(x[0]-0.04, y12[0]-0.02, str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
# subplot1.text(x[1], y12[1]-0.01, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
# subplot1.text(x[2]-0.01, y12[2], str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')
#
# # for xCor, yCor in zip(x, y):
# #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# # for xCor, yCor in zip(x, y2):
# #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL13 = subplot1.twinx()
# plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[19, 244])#, ylabel='execution time (minutes)')
# pL13.bar(x - width / 2, y11Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
# # pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, y11Time):
#     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# # for xCor, yCor in zip(x-0.001, y12Time):
# #     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
#
# h1, l1 = subplot1.get_legend_handles_labels()
# h2, l2 = pL13.get_legend_handles_labels()
#
# lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.05, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
# # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
# ################
#
#
# ### subplot2 ###
# plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.46, 0.80])
# pL21 = subplot2.plot(x, y21, 'k--', label='Training Score', zorder=10)
# pL22 = subplot2.plot(x, y22, 'k-.', label='Prediction Score', zorder=10)
# subplot2.text(x[0], y21[0]-0.02, str("%.3f" % (y21[0]-0.0005)), weight='bold')
# subplot2.text(x[1], y21[1], str("%.3f" % (y21[1]-0.0005)), weight='bold')
# subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')
#
# subplot2.text(x[0], y22[0]+0.01, str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
# subplot2.text(x[1], y22[1]-0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
# subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
# # for xCor, yCor in zip(x, y21):
# #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# # for xCor, yCor in zip(x, y22):
# #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL23 = subplot2.twinx()
# plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[19, 244])#, ylabel='execution time (minutes)')
# pL23.bar(x - width / 2, y21Time, width, alpha = 0.2, label='Time', color='black', zorder=1)
# # pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, y21Time):
#     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# # for xCor, yCor in zip(x-0.001, y22Time):
# #     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# ################
#
# fig.tight_layout()
# fig.savefig('apiSequencesPrimitive_TrainingScores.png', bbox_inches='tight')

### ___ api sequences primitive training scores ___ OLD###


###>>> api sequences primitive normal refined OLD >>>###
# plt.rcParams["figure.figsize"] = [12, 6]    # set figure size to enlarge the plot. Remember to do >>> \includegraphics[width=1.0\textwidth] <<<
#
# #fig, ax1 = plt.subplots()
# fig, (subplot1, subplot2) = plt.subplots(1, 2, sharey='row')
# # print(fig.get_size_inches())
# # fig.set_size_inches(10.5, 30.5)
#
# my_xticks = ['KMeans','MeanShift','BIRCH']
# x = np.array([0.5, 1.5, 2.5])
#
#
# ### 250 samples ###
# y11 = np.array([0.613965022544, 0.447815055754, 0.579623502756]) # no refinement prediction score
# y12 = np.array([0.694559491864, 0.502654917477, 0.6681106737]) # refinement prediction score
# y11Time = np.array([333.096138366, 354.252330669, 305.790275085]) # no refinement running time
# y12Time = np.array([37.4366648515, 62.1315805356, 21.3180148482]) # refinement running time
#
# ### 500 samples ###
# y21 = np.array([0.62133028913, 0.326423826616, 0.584341653132])
# y22 = np.array([0.775628935346, 0.480805438998, 0.695002372852])
# y21Time = np.array([715.557969447, 892.638915265, 678.772447316])
# y22Time = np.array([91.2272089998, 239.958236881, 47.3285961509])
#
#
# width = 0.35
#
# subplot1.set_title("Primitive (250 samples)")
# subplot2.set_title("Primitive (500 samples)")
# # subplot3.set_title("1 sec (250 samples)")
#
# ### subplot1 ###
# plt.setp(subplot1, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.31, 0.80])
# pL11 = subplot1.plot(x, y11, 'k--', label='Prediction Score (no refinement)', zorder=10)
# pL12 = subplot1.plot(x, y12, 'k-.', label='Prediction Score (refinement)', zorder=10)
# subplot1.text(x[0]-0.03, y11[0], str("%.3f" % (y11[0]-0.0005)), weight='bold')
# subplot1.text(x[1]-0.01, y11[1]-0.02, str("%.3f" % (y11[1]-0.0005)), weight='bold')
# subplot1.text(x[2], y11[2]-0.01, str("%.3f" % (y11[2]-0.0005)), weight='bold')
#
# subplot1.text(x[0]-0.04, y12[0]-0.02, str("%.3f" % (y12[0]-0.0005)), family='fantasy', style='italic')
# subplot1.text(x[1]-0.05, y12[1]+0.015, str("%.3f" % (y12[1]-0.0005)), family='fantasy', style='italic')
# subplot1.text(x[2]-0.01, y12[2], str("%.3f" % (y12[2]-0.0005)), family='fantasy', style='italic')
#
# # for xCor, yCor in zip(x, y):
# #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# # for xCor, yCor in zip(x, y2):
# #     subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL13 = subplot1.twinx()
# plt.setp(pL13, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 900])#, ylabel='execution time (minutes)')
# pL13.bar(x - width / 2, y11Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
# pL13.bar(x, y12Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, y11Time):
#     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# for xCor, yCor in zip(x-0.001, y12Time):
#     pL13.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
#
# h1, l1 = subplot1.get_legend_handles_labels()
# h2, l2 = pL13.get_legend_handles_labels()
#
# lgd = subplot1.legend(h1 + h2, l1 + l2, loc='upper center', bbox_to_anchor=(1.12, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
# # lgd = subplot1.legend(h1, l1, loc='upper center', bbox_to_anchor=(1.0, -0.03), fancybox=True, shadow=False, ncol=5) # http://matplotlib.org/users/legend_guide.html
# ################
#
#
# ### subplot2 ###
# plt.setp(subplot2, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[0.31, 0.80])
# pL21 = subplot2.plot(x, y21, 'k--', label='Prediction Score (no refinement)', zorder=10)
# pL22 = subplot2.plot(x, y22, 'k-.', label='Prediction Score (refinement)', zorder=10)
# subplot2.text(x[0], y21[0]-0.02, str("%.3f" % (y21[0]-0.0005)), weight='bold')
# subplot2.text(x[1], y21[1], str("%.3f" % (y21[1]-0.0005)), weight='bold')
# subplot2.text(x[2], y21[2], str("%.3f" % (y21[2]-0.0005)), weight='bold')
#
# subplot2.text(x[0], y22[0]+0.01, str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
# subplot2.text(x[1], y22[1]-0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
# subplot2.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
# # for xCor, yCor in zip(x, y21):
# #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), weight='bold')
# # for xCor, yCor in zip(x, y22):
# #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# pL23 = subplot2.twinx()
# plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 910])#, ylabel='execution time (minutes)')
# pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
# pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
# for xCor, yCor in zip(x-width/2-0.001, y21Time):
#     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# for xCor, yCor in zip(x-0.001, y22Time):
#     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# ################
#
# fig.tight_layout()
# fig.savefig('apiSequencesPrimitive_NormalRefined.png', bbox_inches='tight')
################
###___ api sequences Primitive normal refined OLD___



# ### >>> Draw malware monthly statistics >>> ###
if False:
    import matplotlib.pyplot as plt
    import numpy as np
    from pylab import *

    fig, ax = plt.subplots()

    x = []
    y = []
    with open("malwareStatistics.txt", 'rb') as mS:
        counter = 0
        for line in mS:
            if counter == 0:
                counter = 1
                continue
            x.append(line.strip().split()[0].strip())
            y.append(line.strip().split()[1].strip())

    plt.rcParams["figure.facecolor"] = "white"
    plt.rcParams["axes.facecolor"] = "white"

    my_xticks = x
    x = np.array(range(1,32))
    print(x.dtype)
    # x.astype('float64')
    y = np.array(y, dtype='S32')
    print(y.dtype)
    y = y.astype('float64')
    print(y.dtype)

    px = arange( 0.0, 31.5, 32.0/64 )
    p = polyfit(x, y, 1)
    py = polyval(p, px)

    plt.xticks(x, my_xticks)
    locs, labels = plt.xticks()
    plt.setp(labels, rotation=60)
    plt.plot(px,py)
    plt.plot(x, y)
    # plt.show()

    ax.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda y, p: format(int(y), ',')))
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    plt.tight_layout()
    plt.savefig('malwareStatisticsMonth.png', bbox_inches='tight')



# ### >>> Malware Numbers Bar Plot >>> ###
if False:
    # """
    # Bar chart demo with pairs of bars grouped for easy comparison.
    # """
    # import numpy as np
    # import matplotlib.pyplot as plt
    #
    # n_groups = 5
    #
    # means_men = (171802109,116469744,45169524,12657673,821865)
    # std_men = (2, 3, 4, 1, 2)
    #
    # means_women = (25, 32, 34, 20, 25)
    # std_women = (3, 5, 2, 3, 3)
    #
    # fig, ax = plt.subplots()
    #
    # index = np.arange(n_groups)
    # bar_width = 0.35
    #
    # opacity = 0.4
    # error_config = {'ecolor': '0.3'}
    #
    # rects1 = plt.bar(index, means_men, bar_width,
    #                  alpha=opacity,
    #                  color='b',
    #                  # yerr=std_men,
    #                  error_kw=error_config,
    #                  label='Men')
    #
    # # rects2 = plt.bar(index + bar_width, means_women, bar_width,
    # #                  alpha=opacity,
    # #                  color='r',
    # #                  yerr=std_women,
    # #                  error_kw=error_config,
    # #                  label='Women')
    #
    # plt.xlabel('Group')
    # # plt.ylabel('Scores')
    # plt.title('Amounts of Different Malware Types')
    # plt.xticks(index + bar_width / 2, ('A', 'B', 'C', 'D', 'E'))
    # plt.legend()
    #
    # plt.tight_layout()
    # plt.show()

    import numpy as na

    from matplotlib.pyplot import *

    # labels = ['Malicious attacks (49.52%)','Unique malicious and potentially unwanted objects (33.57%)','Unique URLs recognized as malicious (13.02%)','Unique malicious objects (3.65%)','Crypto ransomware attacks (0.24%)']
    labels = ['A', 'B', 'C', 'D', 'E']
    data = [171802109,116469744,45169524,12657673,821865]
    # error = [0.3497, 0.3108]

    xlocations = na.array(range(len(data))) + 0.5
    width = 0.5
    # bar(xlocations, data, yerr=error, width=width)
    bar(xlocations, data, width=width)
    # yticks(range(500000, 200000000))
    xticks(xlocations + width / 2, labels)
    xlim(0, xlocations[-1] + width * 2)
    ylim(500000, 180000000)
    for xCor, yCor in zip(xlocations, data):
        text(xCor-0.1, yCor+1000000, str("%d" % (yCor)))
    title("Amounts of Different Malware Types")
    gca().get_xaxis().tick_bottom()
    gca().get_yaxis().tick_left()

    # show()

    plt.savefig('malwareTypeStatistics.png', bbox_inches='tight')

# ___________________________________

#### Malware Numbers Bar Plot 2 ###
if False:
    import pandas as pd
    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches

    s = pd.Series(
        [171802109, 116469744, 45169524, 12657673, 821865],
        # index = ["A", "B", "C", "D", "E"]
    )

    #Set descriptions:
    # plt.title("Amounts of Different Malware Types")
    # plt.ylabel('Delay Incident')
    # plt.xlabel('Carrier')

    #Set tick colors:
    ax = plt.gca()
    # ax.invert_xaxis()
    # ax.tick_params(axis='x', colors='blue')
    ax.get_xaxis().set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_yaxis().set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.tick_params(axis='y', colors='black')
    for xCor, yCor in zip([1, 2, 3, 4, 5], [171802109, 116469744, 45169524, 12657673, 821865]):
        ax.text(xCor - 0.1, yCor + 1000000, str("%d" % (yCor)))

    #Plot the data:
    my_colors = 'cgykbmc'  #red, green, blue, black, etc.
    patterns = [ "/" , "\\" , "|" , "-" , "+" , "x", "o", "O", ".", "*" ]


    s.plot(
        kind='bar',
        color=my_colors,
    )

    # labels = ['Malicious attacks (49.52%)','Unique malicious and potentially unwanted objects (33.57%)',
    # 'Unique URLs recognized as malicious (13.02%)','Unique malicious objects (3.65%)','Crypto ransomware attacks (0.24%)']
    MA = mpatches.Patch(color='cyan', label='Malicious attacks')
    UM = mpatches.Patch(color='green', label='Unique malicious and potentially unwanted objects')
    UU = mpatches.Patch(color='yellow', label='Unique URLs recognized as malicious')
    UM2 = mpatches.Patch(color='black', label='Unique malicious objects')
    CR = mpatches.Patch(color='blue', label='Crypto ransomware attacks')
    plt.legend(handles=[MA, UM, UU, UM2, CR], loc='upper right', bbox_to_anchor=(1.7, 0.75), fancybox=True, shadow=False, ncol=1)
    # plt.legend(handles=[MA, UM, UU, UM2, CR], loc='upper right')

    # plt.show()
    plt.savefig('malwareTypeStatistics.png', bbox_inches='tight')
####



# ### >>> Malware Numbers Pie >>> ###
if True:
    import matplotlib.pyplot as plt
    from matplotlib import cm
    import numpy as np


    def make_autopct(values):
        def my_autopct(pct):
            total = sum(values)
            val = int(round(pct * total / 100.0))
            # return '{p:.2f}%  ({v:d})'.format(p=pct, v=val)
            return '{p:.2f}%'.format(p=pct)

        return my_autopct


    plt.rcParams["figure.figsize"] = [10, 5]

    # x = np.char.array(['Malicious attacks (49.52%)', 'Unique unwanted objects (33.57%)', 'Unique malicious URLs (13.02%)', 'Unique malicious objects (3.65%)', 'Crypto ransomware attacks (0.24%)'])
    x = np.char.array(
        ['Malicious attacks', 'Unique unwanted objects', 'Unique malicious URLs', 'Unique malicious objects',
         'Crypto ransomware attacks'])
    y = np.array([171802109, 116469744, 45169524, 12657673, 821865])
    colors = cm.Set3(np.arange(5) / 8.)
    percent = 100. * y / y.sum()

    f = plt.figure()
    ax = f.add_subplot(111, aspect='equal')

    patches, texts, autotexts = plt.pie(y, colors=colors, autopct=make_autopct(y))
    labels = ['{0} - {1:1.2f}% ({2})'.format(i, j, k) for i, j, k in zip(x, percent, y)]

    sort_legend = True
    if sort_legend:
        patches, labels, dummy = zip(*sorted(zip(patches, labels, y),
                                             key=lambda x: x[2],
                                             reverse=True))

    plt.legend(patches, labels, loc=(0.95, 0.37))

    # for patch, txt in zip(patches, autotexts):
    #     ang = (patch.theta2 + patch.theta1) / 2.
    #     # new coordinates of the text, 0.7 is the distance from the center
    #     x = patch.r * 0.7 * np.cos(ang * np.pi / 180)
    #     y = patch.r * 0.7 * np.sin(ang * np.pi / 180)
    #     # if patch is narrow enough, move text to new coordinates
    #     if (patch.theta2 - patch.theta1) < 10.:
    #         txt.set_position((x, y))


    plt.tight_layout()
    # plt.show()

    plt.savefig('malwareStatisticsPie.png', bbox_inches='tight')
# #____________________________________


# ### >>> 1- to 100-gram >>> ###
# import matplotlib.pyplot as plt
# from matplotlib import cm
# import numpy as np
# from pylab import *
#
# plt.rcParams["figure.figsize"] = [10, 5]
# fig, (subplot1) = plt.subplots(1, 1, sharey='row')
#
# x = np.arange(1, 101, 1)
# y = ['0.662842061721', '0.722615568535', '0.71250629309', '0.775628935346', '0.734515746625', '0.715631640832', '0.700535403052', '0.700535403052', '0.674114816882', '0.69635872565', '0.655243867056', '0.644268676607', '0.676470825566', '0.739037448182', '0.655940810281', '0.647252337375', '0.674582124951', '0.719428790906', '0.649594537938', '0.678874520545', '0.628581591034', '0.636114223773', '0.663118840792', '0.663118840792', '0.641564574947', '0.609574454245', '0.667195457993', '0.650756251039', '0.633076034195', '0.625803987004', '0.618232036801', '0.689150781891', '0.649568019291', '0.625803987004', '0.634235529776', '0.673366814831', '0.618232036801', '0.618232036801', '0.626909501678', '0.649507058858', '0.657279848969', '0.644627274673', '0.631226596708', '0.620475975727', '0.650306312839', '0.626399169526', '0.65771950774', '0.648743536875', '0.61325502892', '0.547190711991', '0.641925327634', '0.62296317252', '0.627774984612', '0.633719984365', '0.596820154894', '0.605760209065', '0.589624318147', '0.574798819225', '0.59476603049', '0.577004118028', '0.573511444662', '0.582348032018', '0.607679640371', '0.566759267261', '0.578243645752', '0.573511444662', '0.6102210744', '0.601894805106', '0.579691704051', '0.512753857186', '0.596820154894', '0.582348032018', '0.594077537803', '0.607679640371', '0.583863100895', '0.573511444662', '0.573511444662', '0.619394973516', '0.549655383172', '0.588979420802', '0.582348032018', '0.512753857186', '0.5595830632', '0.490903399591', '0.509935630076', '0.591421209835', '0.559042712882', '0.591421209835', '0.573511444662', '0.573511444662', '0.573511444662', '0.563015649358', '0.500266518544', '0.567401734607', '0.55298026276', '0.501469586243', '0.578607653634', '0.501469586243', '0.489114020695', '0.568563995549']
# y = list(map(float, y))
#
# subplot1.set_title("Naive API Sequences with Refinement on 500 samples")
# plt.xticks(rotation=90, fontsize=8)
# plt.setp(subplot1, xticks=x, xlim=[0, 101], ylim=[0.00, 1.00], xlabel='N-gram', ylabel='Prediction Score')
# pL = subplot1.plot(x, y, 'k--', label='Prediction Score')
# # subplot1.setp(labels, )
# # subplot1.text(x[0], y22[0]+0.01, str("%.3f" % (y22[0]-0.0005)), family='fantasy', style='italic')
# # subplot1.text(x[1], y22[1]-0.015, str("%.3f" % (y22[1]-0.0005)), family='fantasy', style='italic')
# # subplot1.text(x[2], y22[2], str("%.3f" % (y22[2]-0.0005)), family='fantasy', style='italic')
# counter = 1
# for xCor, yCor in zip(x, y):
#     if counter==1:
#         subplot1.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), fontsize = 10)
#     elif counter==5:
#         counter = 0
#
#     counter += 1
#
# px = arange(0.0, 100.0, 100.0/200)
# p = polyfit(x, y, 5)
# py = polyval(p, px)
# plt.plot(px,py)
#
# # for xCor, yCor in zip(x, y22):
# #     subplot2.text(xCor, yCor, str("%.3f" % (yCor-0.0005)), family='fantasy', style='italic')
#
# # pL23 = subplot2.twinx()
# # plt.setp(pL23, xticks=x, xticklabels=my_xticks, xlim=[0, 3], ylim=[20, 910])#, ylabel='execution time (minutes)')
# # pL23.bar(x - width / 2, y21Time, width / 2, alpha = 0.2, label='Time (no reifnement)', color='black', zorder=1)
# # pL23.bar(x, y22Time, width / 2, alpha = 0.2, label='Time (refinement)', color='black', hatch='//', zorder=1)
# # for xCor, yCor in zip(x-width/2-0.001, y21Time):
# #     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
# # for xCor, yCor in zip(x-0.001, y22Time):
# #     pL23.text(xCor, yCor, str("%.2f" % (yCor-0.005)))
#
# plt.tight_layout()
# # plt.show()
#
# plt.savefig('1to100Gram.png', bbox_inches='tight')
# #____________________________________ # #